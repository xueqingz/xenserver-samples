package xenapi

import (
	"fmt"
)

type VIFRecord struct {
	// Unique identifier/object reference
	UUID string
	// list of the operations allowed in this state. This list is advisory only and the server state may have changed by the time this field is read by a client.
	AllowedOperations []VifOperations
	// links each of the running tasks using this object (by reference) to a current_operation enum which describes the nature of the task.
	CurrentOperations map[string]VifOperations
	// order in which VIF backends are created by xapi
	Device string
	// virtual network to which this vif is connected
	Network NetworkRef
	// virtual machine to which this vif is connected
	VM VMRef
	// ethernet MAC address of virtual interface, as exposed to guest
	MAC string
	// MTU in octets
	MTU int
	// additional configuration
	OtherConfig map[string]string
	// is the device currently attached (erased on reboot)
	CurrentlyAttached bool
	// error/success code associated with last attach-operation (erased on reboot)
	StatusCode int
	// error/success information associated with last attach-operation status (erased on reboot)
	StatusDetail string
	// Device runtime properties
	RuntimeProperties map[string]string
	// QoS algorithm to use
	QosAlgorithmType string
	// parameters for chosen QoS algorithm
	QosAlgorithmParams map[string]string
	// supported QoS algorithms for this VIF
	QosSupportedAlgorithms []string
	// metrics associated with this VIF
	Metrics VIFMetricsRef
	// true if the MAC was autogenerated; false indicates it was set manually
	MACAutogenerated bool
	// current locking mode of the VIF
	LockingMode VifLockingMode
	// A list of IPv4 addresses which can be used to filter traffic passing through this VIF
	Ipv4Allowed []string
	// A list of IPv6 addresses which can be used to filter traffic passing through this VIF
	Ipv6Allowed []string
	// Determines whether IPv4 addresses are configured on the VIF
	Ipv4ConfigurationMode VifIpv4ConfigurationMode
	// IPv4 addresses in CIDR format
	Ipv4Addresses []string
	// IPv4 gateway (the empty string means that no gateway is set)
	Ipv4Gateway string
	// Determines whether IPv6 addresses are configured on the VIF
	Ipv6ConfigurationMode VifIpv6ConfigurationMode
	// IPv6 addresses in CIDR format
	Ipv6Addresses []string
	// IPv6 gateway (the empty string means that no gateway is set)
	Ipv6Gateway string
}

type VIFRef string

// A virtual network interface
type vIF struct{}

var VIF vIF

// GetRecord: Get a record containing the current state of the given VIF.
func (vIF) GetRecord(session *Session, self VIFRef) (retval VIFRecord, err error) {
	method := "VIF.get_record"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFRecord(method+" -> ", result)
	return
}

// GetByUUID: Get a reference to the VIF instance with the specified UUID.
func (vIF) GetByUUID(session *Session, uUID string) (retval VIFRef, err error) {
	method := "VIF.get_by_uuid"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	uUIDArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "uuid"), uUID)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, uUIDArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFRef(method+" -> ", result)
	return
}

// Create: Create a new VIF instance, and return its handle. The constructor args are: device*, network*, VM*, MAC*, MTU*, other_config*, currently_attached, qos_algorithm_type*, qos_algorithm_params*, locking_mode, ipv4_allowed, ipv6_allowed (* = non-optional).
func (vIF) Create(session *Session, args VIFRecord) (retval VIFRef, err error) {
	method := "VIF.create"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	argsArg, err := serializeVIFRecord(fmt.Sprintf("%s(%s)", method, "args"), args)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, argsArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFRef(method+" -> ", result)
	return
}

// AsyncCreate: Create a new VIF instance, and return its handle. The constructor args are: device*, network*, VM*, MAC*, MTU*, other_config*, currently_attached, qos_algorithm_type*, qos_algorithm_params*, locking_mode, ipv4_allowed, ipv6_allowed (* = non-optional).
func (vIF) AsyncCreate(session *Session, args VIFRecord) (retval TaskRef, err error) {
	method := "Async.VIF.create"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	argsArg, err := serializeVIFRecord(fmt.Sprintf("%s(%s)", method, "args"), args)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, argsArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// Destroy: Destroy the specified VIF instance.
func (vIF) Destroy(session *Session, self VIFRef) (err error) {
	method := "VIF.destroy"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg)
	return
}

// AsyncDestroy: Destroy the specified VIF instance.
func (vIF) AsyncDestroy(session *Session, self VIFRef) (retval TaskRef, err error) {
	method := "Async.VIF.destroy"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// GetUUID: Get the uuid field of the given VIF.
func (vIF) GetUUID(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_uuid"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetAllowedOperations: Get the allowed_operations field of the given VIF.
func (vIF) GetAllowedOperations(session *Session, self VIFRef) (retval []VifOperations, err error) {
	method := "VIF.get_allowed_operations"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeEnumVifOperationsSet(method+" -> ", result)
	return
}

// GetCurrentOperations: Get the current_operations field of the given VIF.
func (vIF) GetCurrentOperations(session *Session, self VIFRef) (retval map[string]VifOperations, err error) {
	method := "VIF.get_current_operations"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringToEnumVifOperationsMap(method+" -> ", result)
	return
}

// GetDevice: Get the device field of the given VIF.
func (vIF) GetDevice(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_device"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetNetwork: Get the network field of the given VIF.
func (vIF) GetNetwork(session *Session, self VIFRef) (retval NetworkRef, err error) {
	method := "VIF.get_network"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeNetworkRef(method+" -> ", result)
	return
}

// GetVM: Get the VM field of the given VIF.
func (vIF) GetVM(session *Session, self VIFRef) (retval VMRef, err error) {
	method := "VIF.get_VM"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeVMRef(method+" -> ", result)
	return
}

// GetMAC: Get the MAC field of the given VIF.
func (vIF) GetMAC(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_MAC"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetMTU: Get the MTU field of the given VIF.
func (vIF) GetMTU(session *Session, self VIFRef) (retval int, err error) {
	method := "VIF.get_MTU"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeInt(method+" -> ", result)
	return
}

// GetOtherConfig: Get the other_config field of the given VIF.
func (vIF) GetOtherConfig(session *Session, self VIFRef) (retval map[string]string, err error) {
	method := "VIF.get_other_config"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringToStringMap(method+" -> ", result)
	return
}

// GetCurrentlyAttached: Get the currently_attached field of the given VIF.
func (vIF) GetCurrentlyAttached(session *Session, self VIFRef) (retval bool, err error) {
	method := "VIF.get_currently_attached"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeBool(method+" -> ", result)
	return
}

// GetStatusCode: Get the status_code field of the given VIF.
func (vIF) GetStatusCode(session *Session, self VIFRef) (retval int, err error) {
	method := "VIF.get_status_code"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeInt(method+" -> ", result)
	return
}

// GetStatusDetail: Get the status_detail field of the given VIF.
func (vIF) GetStatusDetail(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_status_detail"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetRuntimeProperties: Get the runtime_properties field of the given VIF.
func (vIF) GetRuntimeProperties(session *Session, self VIFRef) (retval map[string]string, err error) {
	method := "VIF.get_runtime_properties"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringToStringMap(method+" -> ", result)
	return
}

// GetQosAlgorithmType: Get the qos/algorithm_type field of the given VIF.
func (vIF) GetQosAlgorithmType(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_qos_algorithm_type"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetQosAlgorithmParams: Get the qos/algorithm_params field of the given VIF.
func (vIF) GetQosAlgorithmParams(session *Session, self VIFRef) (retval map[string]string, err error) {
	method := "VIF.get_qos_algorithm_params"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringToStringMap(method+" -> ", result)
	return
}

// GetQosSupportedAlgorithms: Get the qos/supported_algorithms field of the given VIF.
func (vIF) GetQosSupportedAlgorithms(session *Session, self VIFRef) (retval []string, err error) {
	method := "VIF.get_qos_supported_algorithms"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringSet(method+" -> ", result)
	return
}

// GetMetrics: Get the metrics field of the given VIF.
func (vIF) GetMetrics(session *Session, self VIFRef) (retval VIFMetricsRef, err error) {
	method := "VIF.get_metrics"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFMetricsRef(method+" -> ", result)
	return
}

// GetMACAutogenerated: Get the MAC_autogenerated field of the given VIF.
func (vIF) GetMACAutogenerated(session *Session, self VIFRef) (retval bool, err error) {
	method := "VIF.get_MAC_autogenerated"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeBool(method+" -> ", result)
	return
}

// GetLockingMode: Get the locking_mode field of the given VIF.
func (vIF) GetLockingMode(session *Session, self VIFRef) (retval VifLockingMode, err error) {
	method := "VIF.get_locking_mode"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeEnumVifLockingMode(method+" -> ", result)
	return
}

// GetIpv4Allowed: Get the ipv4_allowed field of the given VIF.
func (vIF) GetIpv4Allowed(session *Session, self VIFRef) (retval []string, err error) {
	method := "VIF.get_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringSet(method+" -> ", result)
	return
}

// GetIpv6Allowed: Get the ipv6_allowed field of the given VIF.
func (vIF) GetIpv6Allowed(session *Session, self VIFRef) (retval []string, err error) {
	method := "VIF.get_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringSet(method+" -> ", result)
	return
}

// GetIpv4ConfigurationMode: Get the ipv4_configuration_mode field of the given VIF.
func (vIF) GetIpv4ConfigurationMode(session *Session, self VIFRef) (retval VifIpv4ConfigurationMode, err error) {
	method := "VIF.get_ipv4_configuration_mode"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeEnumVifIpv4ConfigurationMode(method+" -> ", result)
	return
}

// GetIpv4Addresses: Get the ipv4_addresses field of the given VIF.
func (vIF) GetIpv4Addresses(session *Session, self VIFRef) (retval []string, err error) {
	method := "VIF.get_ipv4_addresses"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringSet(method+" -> ", result)
	return
}

// GetIpv4Gateway: Get the ipv4_gateway field of the given VIF.
func (vIF) GetIpv4Gateway(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_ipv4_gateway"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// GetIpv6ConfigurationMode: Get the ipv6_configuration_mode field of the given VIF.
func (vIF) GetIpv6ConfigurationMode(session *Session, self VIFRef) (retval VifIpv6ConfigurationMode, err error) {
	method := "VIF.get_ipv6_configuration_mode"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeEnumVifIpv6ConfigurationMode(method+" -> ", result)
	return
}

// GetIpv6Addresses: Get the ipv6_addresses field of the given VIF.
func (vIF) GetIpv6Addresses(session *Session, self VIFRef) (retval []string, err error) {
	method := "VIF.get_ipv6_addresses"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeStringSet(method+" -> ", result)
	return
}

// GetIpv6Gateway: Get the ipv6_gateway field of the given VIF.
func (vIF) GetIpv6Gateway(session *Session, self VIFRef) (retval string, err error) {
	method := "VIF.get_ipv6_gateway"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeString(method+" -> ", result)
	return
}

// SetOtherConfig: Set the other_config field of the given VIF.
func (vIF) SetOtherConfig(session *Session, self VIFRef, value map[string]string) (err error) {
	method := "VIF.set_other_config"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringToStringMap(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AddToOtherConfig: Add the given key-value pair to the other_config field of the given VIF.
func (vIF) AddToOtherConfig(session *Session, self VIFRef, key string, value string) (err error) {
	method := "VIF.add_to_other_config"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	keyArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "key"), key)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, keyArg, valueArg)
	return
}

// RemoveFromOtherConfig: Remove the given key and its corresponding value from the other_config field of the given VIF.  If the key is not in that Map, then do nothing.
func (vIF) RemoveFromOtherConfig(session *Session, self VIFRef, key string) (err error) {
	method := "VIF.remove_from_other_config"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	keyArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "key"), key)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, keyArg)
	return
}

// SetQosAlgorithmType: Set the qos/algorithm_type field of the given VIF.
func (vIF) SetQosAlgorithmType(session *Session, self VIFRef, value string) (err error) {
	method := "VIF.set_qos_algorithm_type"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// SetQosAlgorithmParams: Set the qos/algorithm_params field of the given VIF.
func (vIF) SetQosAlgorithmParams(session *Session, self VIFRef, value map[string]string) (err error) {
	method := "VIF.set_qos_algorithm_params"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringToStringMap(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AddToQosAlgorithmParams: Add the given key-value pair to the qos/algorithm_params field of the given VIF.
func (vIF) AddToQosAlgorithmParams(session *Session, self VIFRef, key string, value string) (err error) {
	method := "VIF.add_to_qos_algorithm_params"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	keyArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "key"), key)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, keyArg, valueArg)
	return
}

// RemoveFromQosAlgorithmParams: Remove the given key and its corresponding value from the qos/algorithm_params field of the given VIF.  If the key is not in that Map, then do nothing.
func (vIF) RemoveFromQosAlgorithmParams(session *Session, self VIFRef, key string) (err error) {
	method := "VIF.remove_from_qos_algorithm_params"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	keyArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "key"), key)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, keyArg)
	return
}

// Plug: Hotplug the specified VIF, dynamically attaching it to the running VM
func (vIF) Plug(session *Session, self VIFRef) (err error) {
	method := "VIF.plug"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg)
	return
}

// AsyncPlug: Hotplug the specified VIF, dynamically attaching it to the running VM
func (vIF) AsyncPlug(session *Session, self VIFRef) (retval TaskRef, err error) {
	method := "Async.VIF.plug"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// Unplug: Hot-unplug the specified VIF, dynamically unattaching it from the running VM
func (vIF) Unplug(session *Session, self VIFRef) (err error) {
	method := "VIF.unplug"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg)
	return
}

// AsyncUnplug: Hot-unplug the specified VIF, dynamically unattaching it from the running VM
func (vIF) AsyncUnplug(session *Session, self VIFRef) (retval TaskRef, err error) {
	method := "Async.VIF.unplug"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// UnplugForce: Forcibly unplug the specified VIF
func (vIF) UnplugForce(session *Session, self VIFRef) (err error) {
	method := "VIF.unplug_force"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg)
	return
}

// AsyncUnplugForce: Forcibly unplug the specified VIF
func (vIF) AsyncUnplugForce(session *Session, self VIFRef) (retval TaskRef, err error) {
	method := "Async.VIF.unplug_force"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// Move: Move the specified VIF to the specified network, even while the VM is running
func (vIF) Move(session *Session, self VIFRef, network NetworkRef) (err error) {
	method := "VIF.move"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	networkArg, err := serializeNetworkRef(fmt.Sprintf("%s(%s)", method, "network"), network)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, networkArg)
	return
}

// AsyncMove: Move the specified VIF to the specified network, even while the VM is running
func (vIF) AsyncMove(session *Session, self VIFRef, network NetworkRef) (retval TaskRef, err error) {
	method := "Async.VIF.move"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	networkArg, err := serializeNetworkRef(fmt.Sprintf("%s(%s)", method, "network"), network)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, networkArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// SetLockingMode: Set the locking mode for this VIF
func (vIF) SetLockingMode(session *Session, self VIFRef, value VifLockingMode) (err error) {
	method := "VIF.set_locking_mode"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeEnumVifLockingMode(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncSetLockingMode: Set the locking mode for this VIF
func (vIF) AsyncSetLockingMode(session *Session, self VIFRef, value VifLockingMode) (retval TaskRef, err error) {
	method := "Async.VIF.set_locking_mode"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeEnumVifLockingMode(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// SetIpv4Allowed: Set the IPv4 addresses to which traffic on this VIF can be restricted
func (vIF) SetIpv4Allowed(session *Session, self VIFRef, value []string) (err error) {
	method := "VIF.set_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringSet(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncSetIpv4Allowed: Set the IPv4 addresses to which traffic on this VIF can be restricted
func (vIF) AsyncSetIpv4Allowed(session *Session, self VIFRef, value []string) (retval TaskRef, err error) {
	method := "Async.VIF.set_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringSet(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// AddIpv4Allowed: Associates an IPv4 address with this VIF
func (vIF) AddIpv4Allowed(session *Session, self VIFRef, value string) (err error) {
	method := "VIF.add_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncAddIpv4Allowed: Associates an IPv4 address with this VIF
func (vIF) AsyncAddIpv4Allowed(session *Session, self VIFRef, value string) (retval TaskRef, err error) {
	method := "Async.VIF.add_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// RemoveIpv4Allowed: Removes an IPv4 address from this VIF
func (vIF) RemoveIpv4Allowed(session *Session, self VIFRef, value string) (err error) {
	method := "VIF.remove_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncRemoveIpv4Allowed: Removes an IPv4 address from this VIF
func (vIF) AsyncRemoveIpv4Allowed(session *Session, self VIFRef, value string) (retval TaskRef, err error) {
	method := "Async.VIF.remove_ipv4_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// SetIpv6Allowed: Set the IPv6 addresses to which traffic on this VIF can be restricted
func (vIF) SetIpv6Allowed(session *Session, self VIFRef, value []string) (err error) {
	method := "VIF.set_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringSet(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncSetIpv6Allowed: Set the IPv6 addresses to which traffic on this VIF can be restricted
func (vIF) AsyncSetIpv6Allowed(session *Session, self VIFRef, value []string) (retval TaskRef, err error) {
	method := "Async.VIF.set_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeStringSet(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// AddIpv6Allowed: Associates an IPv6 address with this VIF
func (vIF) AddIpv6Allowed(session *Session, self VIFRef, value string) (err error) {
	method := "VIF.add_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncAddIpv6Allowed: Associates an IPv6 address with this VIF
func (vIF) AsyncAddIpv6Allowed(session *Session, self VIFRef, value string) (retval TaskRef, err error) {
	method := "Async.VIF.add_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// RemoveIpv6Allowed: Removes an IPv6 address from this VIF
func (vIF) RemoveIpv6Allowed(session *Session, self VIFRef, value string) (err error) {
	method := "VIF.remove_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	return
}

// AsyncRemoveIpv6Allowed: Removes an IPv6 address from this VIF
func (vIF) AsyncRemoveIpv6Allowed(session *Session, self VIFRef, value string) (retval TaskRef, err error) {
	method := "Async.VIF.remove_ipv6_allowed"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	valueArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "value"), value)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, valueArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// ConfigureIpv4: Configure IPv4 settings for this virtual interface
func (vIF) ConfigureIpv4(session *Session, self VIFRef, mode VifIpv4ConfigurationMode, address string, gateway string) (err error) {
	method := "VIF.configure_ipv4"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	modeArg, err := serializeEnumVifIpv4ConfigurationMode(fmt.Sprintf("%s(%s)", method, "mode"), mode)
	if err != nil {
		return
	}
	addressArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "address"), address)
	if err != nil {
		return
	}
	gatewayArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "gateway"), gateway)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, modeArg, addressArg, gatewayArg)
	return
}

// AsyncConfigureIpv4: Configure IPv4 settings for this virtual interface
func (vIF) AsyncConfigureIpv4(session *Session, self VIFRef, mode VifIpv4ConfigurationMode, address string, gateway string) (retval TaskRef, err error) {
	method := "Async.VIF.configure_ipv4"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	modeArg, err := serializeEnumVifIpv4ConfigurationMode(fmt.Sprintf("%s(%s)", method, "mode"), mode)
	if err != nil {
		return
	}
	addressArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "address"), address)
	if err != nil {
		return
	}
	gatewayArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "gateway"), gateway)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, modeArg, addressArg, gatewayArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// ConfigureIpv6: Configure IPv6 settings for this virtual interface
func (vIF) ConfigureIpv6(session *Session, self VIFRef, mode VifIpv6ConfigurationMode, address string, gateway string) (err error) {
	method := "VIF.configure_ipv6"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	modeArg, err := serializeEnumVifIpv6ConfigurationMode(fmt.Sprintf("%s(%s)", method, "mode"), mode)
	if err != nil {
		return
	}
	addressArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "address"), address)
	if err != nil {
		return
	}
	gatewayArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "gateway"), gateway)
	if err != nil {
		return
	}
	_, err = session.client.sendCall(method, sessionIDArg, selfArg, modeArg, addressArg, gatewayArg)
	return
}

// AsyncConfigureIpv6: Configure IPv6 settings for this virtual interface
func (vIF) AsyncConfigureIpv6(session *Session, self VIFRef, mode VifIpv6ConfigurationMode, address string, gateway string) (retval TaskRef, err error) {
	method := "Async.VIF.configure_ipv6"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	selfArg, err := serializeVIFRef(fmt.Sprintf("%s(%s)", method, "self"), self)
	if err != nil {
		return
	}
	modeArg, err := serializeEnumVifIpv6ConfigurationMode(fmt.Sprintf("%s(%s)", method, "mode"), mode)
	if err != nil {
		return
	}
	addressArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "address"), address)
	if err != nil {
		return
	}
	gatewayArg, err := serializeString(fmt.Sprintf("%s(%s)", method, "gateway"), gateway)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg, selfArg, modeArg, addressArg, gatewayArg)
	if err != nil {
		return
	}
	retval, err = deserializeTaskRef(method+" -> ", result)
	return
}

// GetAll: Return a list of all the VIFs known to the system.
func (vIF) GetAll(session *Session) (retval []VIFRef, err error) {
	method := "VIF.get_all"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFRefSet(method+" -> ", result)
	return
}

// GetAllRecords: Return a map of VIF references to VIF records for all VIFs known to the system.
func (vIF) GetAllRecords(session *Session) (retval map[VIFRef]VIFRecord, err error) {
	method := "VIF.get_all_records"
	sessionIDArg, err := serializeSessionRef(fmt.Sprintf("%s(%s)", method, "session_id"), session.ref)
	if err != nil {
		return
	}
	result, err := session.client.sendCall(method, sessionIDArg)
	if err != nil {
		return
	}
	retval, err = deserializeVIFRefToVIFRecordMap(method+" -> ", result)
	return
}

